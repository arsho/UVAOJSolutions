#include<cstdio>
#include<cstring>
#include<cassert>
#include<vector>
#include<list>
#include<queue>
#include<map>
#include<set>
#include<deque>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iostream>
#include<iomanip>
#include<cmath>
#include<cstdlib>
#include<ctime>
#include<fstream>
#include<typeinfo>
#include<locale>
#include<iterator>
#include<valarray>
#include<complex>
#include<climits>

using namespace std;
#define uld unsingned long long
#define ld long long
#define inf INT_MAX
#define pi 2*acos(0.0)
#define vi vector<int>
#define  vl vector<long long>
#define pdd pair<int, int>
#define pll pair<long long, long long>
#define mp make_pair
#define mdd map<int, int>
#define mod 1000000000
#define pf first
#define ps second
#define vsort(v) sort(v.begin(), v.end())
#define cas(a) printf("Case %d:",a)
#define pb push_back
int dp[5000][5000];
int main()
{
    char a[500], b[500];
    int c=0,d,e,f,g,h,i,j,k;

    while(gets(a)!=0)
    {
        if(a[0]=='#')
            break;
        gets(b);

        c++;
        d=strlen(a);
        e=strlen(b);

        for(i=0; i<d; i++)
        {
            dp[0][d]=0;
        }
        for(j=0; j<e; j++)
        {
            dp[e][0]=0;
        }
        for(i=1; i<=d; i++)
        {
            for(j=1; j<=e; j++)
            {
                if(a[i-1]==b[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        printf("Case #%d: you can visit at most %d cities.\n",c,dp[d][e]);
    }
    return 0;
}
